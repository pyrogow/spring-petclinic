AWSTemplateFormatVersion: "2010-09-09"
Description:
  A stack for deploying containerized applications onto a cluster of EC2
  hosts using Elastic Container Service
Parameters:
  # KeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #   ConstraintDescription: must be the name of an existing EC2 KeyPair
  StackName:
    Type: String
    Default: Arbaiten
    Description: The name of the parent cluster stack that you created.
  DesiredCapacity:
    Type: Number
    Default: "2"
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: "4"
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      [
        t2.micro,
        t2.small,
        t2.medium,
        t2.large,
        m3.medium,
        m3.large,
        m3.xlarge,
        m3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        c4.large,
        c4.xlarge,
        c4.2xlarge,
        c4.4xlarge,
        c4.8xlarge,
        c3.large,
        c3.xlarge,
        c3.2xlarge,
        c3.4xlarge,
        c3.8xlarge,
        r3.large,
        r3.xlarge,
        r3.2xlarge,
        r3.4xlarge,
        r3.8xlarge,
        i2.xlarge,
        i2.2xlarge,
        i2.4xlarge,
        i2.8xlarge,
      ]
    ConstraintDescription: Please choose a valid instance type.
  DBClass:
    Description: Database instance class
    Type: String
    Default: db.t2.micro
    ConstraintDescription: must select a valid database instance type.
  DBName:
    Default: petclinic
    Description: petclinicDB
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Default: root
    NoEcho: "true"
    Description: admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Default: petclinic
    NoEcho: "true"
    Description: admin petclinicDB account password
    Type: String
    MinLength: "1"
    MaxLength: "254"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  # MultiAZDatabase:
  #   Default: "false"
  #   Description: Create a Multi-AZ MySQL Amazon RDS database instance
  #   Type: String
  # WebServerCapacity:
  #   Default: "1"
  #   Description: The initial number of WebServer instances
  #   Type: Number
  #   MinValue: "1"
  #   MaxValue: "2"
  #   ConstraintDescription: must be between 1 and 5 EC2 instances.
  DBAllocatedStorage:
    Default: "5"
    Description: The size of the database (Gb)
    Type: Number
    MinValue: "5"
    MaxValue: "20"
    ConstraintDescription: must be between 5 and 1024Gb.
  ServiceName:
    Type: String
    Default: PetclinicImages
    Description: A name for the service
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  HostPort:
    Type: Number
    Default: 8080
    Description: What port number the application outside the docker container is binding to
  ImageUrl:
    Type: String
    # Default: 591425342341.dkr.ecr.eu-central-1.amazonaws.com/app-main:latest
    Default: nginx
    Description:
      The url of a docker image that contains the application process that
      will handle the traffic for this service
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
# ________________MAPPING_______________
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  # 10.0.2.0 - 10.0.2.255
  # 10.0.3.0 - 10.0.3.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: "172.31.0.0/16"
    PublicOne:
      CIDR: "172.31.1.0/24"
    PublicTwo:
      CIDR: "172.31.2.0/24"
    DBPublic:
      CIDR: "172.31.3.0/24"
    # PrivateOne:
    #   CIDR: "10.0.2.0/24"
    # PrivateTwo:
    #   CIDR: "10.0.3.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      MapPublicIpOnLaunch: true
  DBPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "DBPublic", "CIDR"]
      MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  DBPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref "ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupPublic

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # taskRoleArn: !GetAtt EC2Role.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          # Image: "591425342341.dkr.ecr.eu-central-1.amazonaws.com/app-main:latest"
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
              HostPort: !Ref HostPort
      # taskRoleArn: !Ref "EC2Role"

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  # RDSSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
  #     VpcId: !Ref "VPC"
  #     SecurityGroupIngress:
  #       # Only allow inbound access to ECS from the ELB
  #       - CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #     SecurityGroupEgress:
  #       - CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the ELB
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSG
          IpProtocol: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupEgress:
        - SourceSecurityGroupId: !Ref PublicLoadBalancerSG
          IpProtocol: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref "EcsHostSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref "EcsHostSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "EcsHostSecurityGroup"

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref "ContainerInstances"
      MinSize: "2"
      MaxSize: !Ref "MaxSize"
      DesiredCapacity: !Ref "DesiredCapacity"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref "ECSAMI"
      SecurityGroups: [!Ref "EcsHostSecurityGroup"]
      InstanceType: !Ref "InstanceType"
      KeyName: aws-my_laptop2eu
      IamInstanceProfile: !Ref "EC2InstanceProfile"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref "EC2Role"]

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  myDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSusnetGroupdescription
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
        - !Ref DBPublicSubnet

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MasterUserPassword: !Ref DBPassword
      MasterUsername: !Ref DBUser
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: 5
      Port: 3306
      DBSubnetGroupName: !Ref myDBSubnetGroup
      Tags:
        - Key: Name
          Value: PetclinicDatabase
      VPCSecurityGroups:
        - Ref: EcsHostSecurityGroup

      # SecurityGroupIngress:
      #   # Only allow inbound access to ECS from the ELB
      #   - SourceSecurityGroupId: !Ref PublicLoadBalancerSG
      #     IpProtocol: -1
      #   - CidrIp: 0.0.0.0/0
      #     IpProtocol: tcp
      #     FromPort: 22
      #     ToPort: 22
      # VPCSecurityGroups:
      #   - Ref: RDSSecurityGroup
      #   - Ref: DBSecurityGroup
      # BIG PROBLEM. DBSecurityGroup is not supported in this region. The following resource(s) failed to create: [DBSecurityGroup].
  # DBSecurityGroup:
  #   Type: "AWS::RDS::DBSecurityGroup"
  #   Properties:
  #     GroupDescription: Access to the RDS
  #     EC2VpcId: !Ref "VPC"
  # Properties:
  #   DBSecurityGroupIngress:
  #     # CIDRIP: "-1"
  #     EC2SecurityGroupName:
  #       EC2SecurityGroupName:
  #         Ref: EcsHostSecurityGroup
  #   GroupDescription: database access

  # DBSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties:
  #     GroupDescription: Open database for access
  #     VpcId: !Ref VPC

  # DBSecurityGroupIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref DBSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: "3306"
  #     ToPort: "3306"
  #     CidrIp: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  # DBSecurityGroups:
  #   - !Ref DBSecurityGroup

  # DBSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties:
  #     GroupDescription: Access to the RDS
  #     VpcId: !Ref "VPC"
  # Properties:
  #   DBSecurityGroupIngress:
  #     EC2SecurityGroupName: !Ref EcsHostSecurityGroup
  #   GroupDescription: database access

  # Load balancers for getting traffic to containers.
  # This sample template creates load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref "PublicLoadBalancerSG"]

  # A target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 9
      HealthyThresholdCount: 2
      Name: !Join ["-", [!Ref "AWS::StackName"]]
      Port: !Ref HostPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VPC"
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref "TargetGroupPublic"
          Type: "forward"
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 80
      Protocol: HTTP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ClusterName"]]
  # InternalUrl:
  #   Description: The url of the internal load balancer
  #   Value: !Join ["", ["http://", !GetAtt "PrivateLoadBalancer.DNSName"]]
  #   Export:
  #     Name: !Join [":", [!Ref "AWS::StackName", "InternalUrl"]]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ["", ["http://", !GetAtt "PublicLoadBalancer.DNSName"]]
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ExternalUrl"]]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt "ECSRole.Arn"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ECSRole"]]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicListener"]]
  # PrivateListener:
  #   Description: The ARN of the public load balancer's Listener
  #   Value: !Ref PrivateLoadBalancerListener
  #   Export:
  #     Name: !Join [":", [!Ref "AWS::StackName", "PrivateListener"]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "VPCId"]]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref "PublicSubnetOne"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicSubnetOne"]]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref "PublicSubnetTwo"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicSubnetTwo"]]
  # PrivateSubnetOne:
  #   Description: Private subnet one
  #   Value: !Ref "PrivateSubnetOne"
  #   Export:
  #     Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnetOne"]]
  # PrivateSubnetTwo:
  #   Description: Private subnet two
  #   Value: !Ref "PrivateSubnetTwo"
  #   Export:
  #     Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnetTwo"]]
  # DBEC2SecurityGroup:
  #   Description: A DBInstance security group
  #   Value: !Ref "EcsHostSecurityGroup"
  #   Export:
  #     Name: !Join [":", [!Ref "AWS::StackName", "DBEC2SecurityGroup"]]
  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref "EcsHostSecurityGroup"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "EcsHostSecurityGroup"]]
  JDBCConnectionString:
    Description: JDBC connection string for the database
    Value: !Join
      - ""
      - - "jdbc:mysql://"
        - !GetAtt
          - DatabaseInstance
          - Endpoint.Address
        - ":"
        - !GetAtt
          - DatabaseInstance
          - Endpoint.Port
        - /
        - !Ref DBName
